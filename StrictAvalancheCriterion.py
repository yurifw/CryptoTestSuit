#!/usr/bin/python

tested_s_box = \
    ((0x52, 0xf3, 0x7e, 0x1e, 0x90, 0xbb, 0x2c, 0x8a, 0x1c, 0x85, 0x6d, 0xc0, 0xB2, 0x1b, 0x40, 0x23),
     (0xf6, 0x73, 0x29, 0xd9, 0x39, 0x21, 0xcf, 0x3d, 0x9a, 0x8a, 0x2f, 0xcf, 0x7b, 0x04, 0xe8, 0xc8),
     (0x85, 0x7b, 0x7c, 0xaf, 0x86, 0x2f, 0x13, 0x65, 0x75, 0xd3, 0x6d, 0xd4, 0x89, 0x8e, 0x65, 0x05),
     (0xea, 0x77, 0x50, 0xa3, 0xc5, 0x01, 0x0b, 0x46, 0xbf, 0xa7, 0x0c, 0xc7, 0x8e, 0xf2, 0xb1, 0xcb),
     (0xe5, 0xe2, 0x10, 0xd1, 0x05, 0xb0, 0xf5, 0x86, 0xe4, 0x03, 0x71, 0xa6, 0x56, 0x03, 0x9e, 0x3e),
     (0x19, 0x18, 0x52, 0x16, 0xb9, 0xd3, 0x38, 0xd9, 0x04, 0xe3, 0x72, 0x6b, 0xba, 0xe8, 0xbf, 0x9d),
     (0x1d, 0x5a, 0x55, 0xff, 0x71, 0xe1, 0xa8, 0x8e, 0xfe, 0xa2, 0xa7, 0x1f, 0xdf, 0xb0, 0x03, 0xcd),
     (0x08, 0x53, 0x6f, 0xb0, 0x7f, 0x87, 0x8b, 0x02, 0xB1, 0x92, 0x81, 0x27, 0x40, 0x2e, 0x1a, 0xee),
     (0x10, 0xca, 0x82, 0x4f, 0x09, 0xaa, 0xc7, 0x55, 0x24, 0x6c, 0xE2, 0x58, 0xbc, 0xe0, 0x26, 0x37),
     (0xed, 0x8d, 0x2a, 0xd5, 0xed, 0x45, 0xc3, 0xec, 0x1c, 0x3e, 0x2a, 0xb3, 0x9e, 0xb7, 0x38, 0x82),
     (0x23, 0x2d, 0x87, 0xea, 0xda, 0x45, 0x24, 0x03, 0xe7, 0x19, 0xe3, 0xd3, 0x4e, 0xdd, 0x11, 0x4e),
     (0x81, 0x91, 0x91, 0x59, 0xa3, 0x80, 0x92, 0x7e, 0xdb, 0xc4, 0x20, 0xec, 0xdb, 0x55, 0x7f, 0xa8),
     (0xc1, 0x64, 0xab, 0x1b, 0xfd, 0x60, 0x05, 0x13, 0x2c, 0xa9, 0x76, 0xa5, 0x1d, 0x32, 0x8e, 0x1e),
     (0xc0, 0x65, 0xcb, 0x8b, 0x93, 0xe4, 0xae, 0xbe, 0x5f, 0x2c, 0x3b, 0xd2, 0x0f, 0x9f, 0x42, 0xcc),
     (0x6c, 0x80, 0x68, 0x43, 0x09, 0x23, 0xc5, 0x6d, 0x1d, 0x18, 0xbd, 0x5e, 0x1b, 0xB4, 0x85, 0x49),
     (0xbc, 0x0d, 0x1f, 0xa6, 0x6b, 0xd8, 0x22, 0x01, 0x7a, 0xc0, 0x55, 0x16, 0xb3, 0xcf, 0x05, 0x00))


def print_matrix(matrix):
    m = ""
    for lin in range(len(matrix)):
        for col in range(len(matrix[lin])):
            m += str(matrix[lin][col]) + "\t"
            if col == 15:
                m += '\n'
    print m

def sub_bytes(plain_text, s_box):
    col = plain_text >> 4
    row = plain_text & 15
    return s_box[col][row]


def test(s_box):
    qtd_0, qtd_1 = (0, 0)
    for i in range(256):  # para sboxes 16x16
        X = [0]*9
        Y = [0]*9
        V = [0]*8

        X[0] = i
        Y[0] = sub_bytes(X[0], tested_s_box)
        print "X = {0:08b}\nY = {1:08b}".format(X[0],Y[0])
        for i in range(8):  # para sboxes que usam numeros de 8 bits
            X[i+1] = (128 >> i) ^ X[0]  # preparando X0 a X8 (X0 eh a entrada sendo testada, Xi eh o bit alterado
            Y[i+1] = sub_bytes(X[i+1], s_box)
            V[i] = Y[0] ^ Y[i+1]
            print "%s {0:08b}\t{1:08b}\t{2:08b}".format(X[i+1], Y[i+1], V[i]) % (i+1)
        print "\n"
        for i in range(len(V)):
            for bit in range(8):  # para 8 bits
                if ((V[i] >> bit) & 1 == 1):
                    qtd_1 += 1
                else:
                    qtd_0 += 1
    #print "quantidade de 0: %s\nquantidade de 1: %s" % (qtd_0, qtd_1)
    result = float(qtd_1) / float((qtd_0 + qtd_1))
    print "SAC total: %0.9f" % result





test(tested_s_box)
#print_matrix(tested_s_box)
#print sub_bytes(32,tested_s_box)